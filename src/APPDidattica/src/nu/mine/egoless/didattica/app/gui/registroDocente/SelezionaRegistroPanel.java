/*
 * SelezionaRegistroPanel.java
 *
 * Created on 8 marzo 2007, 1.18
 *
 * $Id$
 */

package nu.mine.egoless.didattica.app.gui.registroDocente;


import java.net.PortUnreachableException;
import java.util.Date;
import nu.mine.egoless.didattica.app.bean.ClasseBean;
import nu.mine.egoless.didattica.app.bean.ClassiBean;
import nu.mine.egoless.didattica.app.bean.MateriaInsegnamentoBean;
import nu.mine.egoless.didattica.app.bean.MaterieInsegnamentoBean;
import nu.mine.egoless.didattica.app.gui.componentiComuni.DataPanel;
import nu.mine.egoless.didattica.app.gui.componentiComuni.elementi.ElementiClasse;
import nu.mine.egoless.didattica.app.gui.componentiComuni.UtilitaGUI;
import nu.mine.egoless.didattica.app.gui.componentiComuni.elementi.ElementiMaterieInsegnamento;




/**
 * Il panello consente di visualizzare un determinato registro, 
 * selezionandolo tramite parametri specifici.
 *
 * @author  Alberto Meneghello
 */
public class SelezionaRegistroPanel extends javax.swing.JPanel {
   
   
   /**
    * Creates new form SelezionaRegistroPanel
    * @param ancestor Reference al pannello RegistroInsegnantePanel
    * contenente il SelezionaRegistroPanel.
    */
   public SelezionaRegistroPanel (RegistroInsegnantePanel ancestor) {
      this.ancestor = ancestor;
      // /**/caricaDati();
      classiBean = ancestor.getContenitoreDati ().getClassi ();
      materieInsegnamentoBean = ancestor.getContenitoreDati ().getMaterieInsegnamento ();
      data = UtilitaGUI.getDataCorrente();
      
      inizializzaComponenti ();
   }
   
   
   /**
    * Inizializza le componenti grafiche della GUI.
    */
   private void inizializzaComponenti() {
      initComponents ();
      
      // Aggiunge il selettore delle Materie al pannello (false -> lista non modificabile)
      jcmbMateria = new ElementiMaterieInsegnamento(materieInsegnamentoBean, false);
      jpnlContenitoreMateria.setLayout(new javax.swing.BoxLayout(jpnlContenitoreMateria,javax.swing.BoxLayout.X_AXIS));
      jpnlContenitoreMateria.add(jcmbMateria, jpnlContenitoreMateria);     
      
      // Aggiunge il selettore delle Classi al pannello (false -> lista non modificabile)
      jcmbClasse = new ElementiClasse(classiBean, false);
      jpnlContenitoreClasse.setLayout(new javax.swing.BoxLayout(jpnlContenitoreClasse,javax.swing.BoxLayout.X_AXIS));
      jpnlContenitoreClasse.add(jcmbClasse, jpnlContenitoreClasse);   
      
      // Aggiunge il selettore della Data al pannello
      jpnlData = new DataPanel(data);
      jpnlContenitoreData.setLayout(new javax.swing.BoxLayout(jpnlContenitoreData,javax.swing.BoxLayout.X_AXIS));
      jpnlContenitoreData.add(jpnlData, jpnlContenitoreData);      
   }
   
   
   /** 
    * This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      jlblDataRegistroPanel = new javax.swing.JLabel();
      jlblMateriaRegistroPanel = new javax.swing.JLabel();
      jlblClasseRegistroPanel = new javax.swing.JLabel();
      jbVisualizzaRegistro = new javax.swing.JButton();
      jpnlContenitoreData = new javax.swing.JPanel();
      jpnlContenitoreMateria = new javax.swing.JPanel();
      jpnlContenitoreClasse = new javax.swing.JPanel();

      setBackground(new java.awt.Color(153, 153, 255));
      setPreferredSize(new java.awt.Dimension(600, 50));
      setRequestFocusEnabled(false);
      jlblDataRegistroPanel.setDisplayedMnemonic('g');
      jlblDataRegistroPanel.setLabelFor(jpnlContenitoreData);
      jlblDataRegistroPanel.setText("Giorno:");

      jlblMateriaRegistroPanel.setDisplayedMnemonic('m');
      jlblMateriaRegistroPanel.setLabelFor(jpnlContenitoreMateria);
      jlblMateriaRegistroPanel.setText("Materia:");

      jlblClasseRegistroPanel.setDisplayedMnemonic('c');
      jlblClasseRegistroPanel.setLabelFor(jpnlContenitoreClasse);
      jlblClasseRegistroPanel.setText("Classe:");

      jbVisualizzaRegistro.setMnemonic('v');
      jbVisualizzaRegistro.setText("Visualizza Registro");
      jbVisualizzaRegistro.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jbVisualizzaRegistroActionPerformed(evt);
         }
      });

      jpnlContenitoreData.setOpaque(false);
      org.jdesktop.layout.GroupLayout jpnlContenitoreDataLayout = new org.jdesktop.layout.GroupLayout(jpnlContenitoreData);
      jpnlContenitoreData.setLayout(jpnlContenitoreDataLayout);
      jpnlContenitoreDataLayout.setHorizontalGroup(
         jpnlContenitoreDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 76, Short.MAX_VALUE)
      );
      jpnlContenitoreDataLayout.setVerticalGroup(
         jpnlContenitoreDataLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 19, Short.MAX_VALUE)
      );

      jpnlContenitoreMateria.setOpaque(false);
      org.jdesktop.layout.GroupLayout jpnlContenitoreMateriaLayout = new org.jdesktop.layout.GroupLayout(jpnlContenitoreMateria);
      jpnlContenitoreMateria.setLayout(jpnlContenitoreMateriaLayout);
      jpnlContenitoreMateriaLayout.setHorizontalGroup(
         jpnlContenitoreMateriaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 97, Short.MAX_VALUE)
      );
      jpnlContenitoreMateriaLayout.setVerticalGroup(
         jpnlContenitoreMateriaLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 20, Short.MAX_VALUE)
      );

      jpnlContenitoreClasse.setOpaque(false);
      org.jdesktop.layout.GroupLayout jpnlContenitoreClasseLayout = new org.jdesktop.layout.GroupLayout(jpnlContenitoreClasse);
      jpnlContenitoreClasse.setLayout(jpnlContenitoreClasseLayout);
      jpnlContenitoreClasseLayout.setHorizontalGroup(
         jpnlContenitoreClasseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 99, Short.MAX_VALUE)
      );
      jpnlContenitoreClasseLayout.setVerticalGroup(
         jpnlContenitoreClasseLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(0, 20, Short.MAX_VALUE)
      );

      org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(jlblMateriaRegistroPanel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jpnlContenitoreMateria, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(18, 18, 18)
            .add(jlblClasseRegistroPanel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jpnlContenitoreClasse, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(20, 20, 20)
            .add(jlblDataRegistroPanel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jpnlContenitoreData, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(27, 27, 27)
            .add(jbVisualizzaRegistro)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
         .add(layout.createSequentialGroup()
            .addContainerGap()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
               .add(jbVisualizzaRegistro, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
               .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                  .add(jlblDataRegistroPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .add(jlblClasseRegistroPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 21, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .add(jlblMateriaRegistroPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
               .add(jpnlContenitoreMateria, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jpnlContenitoreClasse, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
               .add(jpnlContenitoreData, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   
   
   /**
    * Visualizza il registro corrispondente ai parametri selezionati.
    */
   private void jbVisualizzaRegistroActionPerformed (java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVisualizzaRegistroActionPerformed
      // Controlla i parametri selezionati
      ClasseBean classe = (ClasseBean)( jcmbClasse.getElementoSelezionato() );
      MateriaInsegnamentoBean materia = (MateriaInsegnamentoBean)( jcmbMateria.getElementoSelezionato() );
      Date dataOdierna = jpnlData.getDataSelezionata();

      // In base ai parametri selezionati apre la pagina di registro corrispondente
      if( classe!=null && materia != null ) ancestor.apriNuovoRegistro(classe, materia, dataOdierna);         //  non si usa l'MVC      
      // Se uno o piu' parametri sono null, allora visualizza un messaggio a video
      else ancestor.showMessage ("Selezionare tutti i campi.");
   }//GEN-LAST:event_jbVisualizzaRegistroActionPerformed


   
   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jbVisualizzaRegistro;
   private javax.swing.JLabel jlblClasseRegistroPanel;
   private javax.swing.JLabel jlblDataRegistroPanel;
   private javax.swing.JLabel jlblMateriaRegistroPanel;
   private javax.swing.JPanel jpnlContenitoreClasse;
   private javax.swing.JPanel jpnlContenitoreData;
   private javax.swing.JPanel jpnlContenitoreMateria;
   // End of variables declaration//GEN-END:variables

   private RegistroInsegnantePanel ancestor;
   
   private DataPanel jpnlData;
   private ElementiClasse jcmbClasse;
   private ElementiMaterieInsegnamento jcmbMateria;
   
   private Date data;
   private ClassiBean classiBean;
   private MaterieInsegnamentoBean materieInsegnamentoBean;
   
   
   
   
   
   
    /**
     * Avvia un'anteprima dell'interfaccia grafica.
     */
    public static void main(String[] args) {
        String str = "com.sun.java.swing.plaf.windows.WindowsLookAndFeel";	// Windows
	//String str = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";		// Grey
	//String str = "javax.swing.plaf.metal.MetalLookAndFeel";   			// Java Metal
	try { javax.swing.UIManager.setLookAndFeel(str); }
	catch (Exception ex) { System.out.println("Failed loading Look And Feel:\n"+ex+'\n'); }
        javax.swing.JFrame temp=new javax.swing.JFrame();
        temp.setLayout(new java.awt.BorderLayout());
        temp.add(new SelezionaRegistroPanel(null));
        temp.setSize(800,80);
        temp.setVisible(true);
    }
    
    
    
    
    /**Si occupa di caricare i dati relativi alle religioni ed alle nazioni rpesenti nel database*/
    private void caricaDati() 
    { 
       try {
         boolean ecc = false;
         String missed = "";
         System.out.println("Caricamento Dati Iniziali") ;
         try{
            System.out.println("Inizio del caricamento della lista classi");
            classiBean.caricaClassi();
            System.out.println("  >> Caricate "+  classiBean.ritornaNumeroDiClassi ()+ " classi.");
         }catch(Exception e){missed += "classi; "; System.out.println("Fallito il caricamento della lista classi"); ecc=true;} 
         try{
            System.out.println("Inizio del caricamento della lista materie");
            materieInsegnamentoBean.caricaMaterie ();
            System.out.println("  >> Caricate "+  materieInsegnamentoBean.ritornaNumeroDiMaterie ()+ " classi.");
         }catch(Exception e){missed += "materie; "; System.out.println("Fallito il caricamento della lista delle materie"); ecc=true;}
         if(!ecc) System.out.println("Caricamento completato con successo");            
         else {
             System.out.println("GUIFrame: Errore di Caricamento: "+missed);
             System.out.println("Fallito il caricamento delle liste: "+missed);
             throw new PortUnreachableException();
         }
       }
       catch(Exception e) { System.out.println ("ECCEZIONE  NEL CARICAMNTO DEI DATI!!!!!"); }
    }
    
   
}


