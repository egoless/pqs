<?xml version="1.0" encoding="UTF-8"?>
<!--
*** GENERATED FROM project.xml - DO NOT EDIT  ***
***         EDIT ../build.xml INSTEAD         ***

For the purpose of easier reading the script
is divided into following sections:

  - initialization
  - compilation
  - jar
  - execution
  - debugging
  - javadoc
  - junit compilation
  - junit execution
  - junit debugging
  - applet
  - cleanup

-->
<project name="APPDidattica-impl" default="default" basedir=".." xmlns:j2seproject3="http://www.netbeans.org/ns/j2se-project/3" xmlns:j2seproject2="http://www.netbeans.org/ns/j2se-project/2" xmlns:j2seproject1="http://www.netbeans.org/ns/j2se-project/1" xmlns:jaxws="http://www.netbeans.org/ns/jax-ws/1">
    <target name="default" depends="test,jar,javadoc" description="Build and test whole project."/>
    <!-- 
    ======================
    INITIALIZATION SECTION 
    ======================
    -->
    <target name="-pre-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-init-private" depends="-pre-init">
        <property file="nbproject/private/private.properties"/>
    </target>
    <target name="-init-user" depends="-pre-init,-init-private">
        <property file="${user.properties.file}"/>
        <!-- The two properties below are usually overridden -->
        <!-- by the active platform. Just a fallback. -->
        <property name="default.javac.source" value="1.4"/>
        <property name="default.javac.target" value="1.4"/>
    </target>
    <target name="-init-project" depends="-pre-init,-init-private,-init-user">
        <property file="nbproject/project.properties"/>
    </target>
    <target name="-do-init" depends="-pre-init,-init-private,-init-user,-init-project,-init-macrodef-property">
        <j2seproject1:property name="platform.home" value="platforms.${platform.active}.home"/>
        <j2seproject1:property name="platform.bootcp" value="platforms.${platform.active}.bootclasspath"/>
        <j2seproject1:property name="platform.compiler" value="platforms.${platform.active}.compile"/>
        <j2seproject1:property name="platform.javac.tmp" value="platforms.${platform.active}.javac"/>
        <condition property="platform.javac" value="${platform.home}/bin/javac">
            <equals arg1="${platform.javac.tmp}" arg2="$${platforms.${platform.active}.javac}"/>
        </condition>
        <property name="platform.javac" value="${platform.javac.tmp}"/>
        <j2seproject1:property name="platform.java.tmp" value="platforms.${platform.active}.java"/>
        <condition property="platform.java" value="${platform.home}/bin/java">
            <equals arg1="${platform.java.tmp}" arg2="$${platforms.${platform.active}.java}"/>
        </condition>
        <property name="platform.java" value="${platform.java.tmp}"/>
        <j2seproject1:property name="platform.javadoc.tmp" value="platforms.${platform.active}.javadoc"/>
        <condition property="platform.javadoc" value="${platform.home}/bin/javadoc">
            <equals arg1="${platform.javadoc.tmp}" arg2="$${platforms.${platform.active}.javadoc}"/>
        </condition>
        <property name="platform.javadoc" value="${platform.javadoc.tmp}"/>
        <condition property="platform.invalid" value="true">
            <or>
                <contains string="${platform.javac}" substring="$${platforms."/>
                <contains string="${platform.java}" substring="$${platforms."/>
                <contains string="${platform.javadoc}" substring="$${platforms."/>
            </or>
        </condition>
        <fail unless="platform.home">Must set platform.home</fail>
        <fail unless="platform.bootcp">Must set platform.bootcp</fail>
        <fail unless="platform.java">Must set platform.java</fail>
        <fail unless="platform.javac">Must set platform.javac</fail>
        <fail if="platform.invalid">Platform is not correctly set up</fail>
        <available file="${manifest.file}" property="manifest.available"/>
        <condition property="manifest.available+main.class">
            <and>
                <isset property="manifest.available"/>
                <isset property="main.class"/>
                <not>
                    <equals arg1="${main.class}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition property="manifest.available+main.class+mkdist.available">
            <and>
                <istrue value="${manifest.available+main.class}"/>
                <isset property="libs.CopyLibs.classpath"/>
            </and>
        </condition>
        <condition property="have.tests">
            <or>
                <available file="${test.src.dir}"/>
            </or>
        </condition>
        <condition property="have.sources">
            <or>
                <available file="${src.dir}"/>
            </or>
        </condition>
        <condition property="netbeans.home+have.tests">
            <and>
                <isset property="netbeans.home"/>
                <isset property="have.tests"/>
            </and>
        </condition>
        <condition property="no.javadoc.preview">
            <isfalse value="${javadoc.preview}"/>
        </condition>
        <property name="run.jvmargs" value=""/>
        <property name="javac.compilerargs" value=""/>
        <property name="work.dir" value="${basedir}"/>
        <condition property="no.deps">
            <and>
                <istrue value="${no.dependencies}"/>
            </and>
        </condition>
        <property name="javac.debug" value="true"/>
        <property name="javadoc.preview" value="true"/>
    </target>
    <target name="-post-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-init-check" depends="-pre-init,-init-private,-init-user,-init-project,-do-init">
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
        <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.jar">Must set dist.jar</fail>
    </target>
    <target name="-init-macrodef-property">
        <macrodef name="property" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute name="name"/>
            <attribute name="value"/>
            <sequential>
                <property name="@{name}" value="${@{value}}"/>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-javac">
        <macrodef name="javac" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute name="srcdir" default="${src.dir}"/>
            <attribute name="destdir" default="${build.classes.dir}"/>
            <attribute name="classpath" default="${javac.classpath}"/>
            <attribute name="debug" default="${javac.debug}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <javac srcdir="@{srcdir}" destdir="@{destdir}" debug="@{debug}" deprecation="${javac.deprecation}" source="${javac.source}" target="${javac.target}" fork="yes" executable="${platform.javac}" tempdir="${java.io.tmpdir}" includeantruntime="false">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <compilerarg line="${javac.compilerargs}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-junit">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute name="includes" default="**/*Test.java"/>
            <sequential>
                <junit showoutput="true" fork="true" dir="${basedir}" failureproperty="tests.failed" errorproperty="tests.failed" jvm="${platform.java}">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.src.dir}" includes="@{includes}"/>
                    </batchtest>
                    <classpath>
                        <path path="${run.test.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper type="glob" from="test-sys-prop.*" to="*"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                    <jvmarg line="${run.jvmargs}"/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-nbjpda">
        <macrodef name="nbjpdastart" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute name="name" default="${main.class}"/>
            <attribute name="classpath" default="${debug.classpath}"/>
            <attribute name="stopclassname" default=""/>
            <sequential>
                <nbjpdastart transport="dt_socket" addressproperty="jpda.address" name="@{name}" stopclassname="@{stopclassname}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <bootclasspath>
                        <path path="${platform.bootcp}"/>
                    </bootclasspath>
                </nbjpdastart>
            </sequential>
        </macrodef>
        <macrodef name="nbjpdareload" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute name="dir" default="${build.classes.dir}"/>
            <sequential>
                <nbjpdareload>
                    <fileset includes="${fix.includes}*.class" dir="@{dir}"/>
                </nbjpdareload>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-debug">
        <macrodef name="debug" uri="http://www.netbeans.org/ns/j2se-project/3">
            <attribute name="classname" default="${main.class}"/>
            <attribute name="classpath" default="${debug.classpath}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java fork="true" classname="@{classname}" dir="${work.dir}" jvm="${platform.java}">
                    <jvmarg value="-Xdebug"/>
                    <jvmarg value="-Xnoagent"/>
                    <jvmarg value="-Djava.compiler=none"/>
                    <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
                    <jvmarg line="${run.jvmargs}"/>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper type="glob" from="run-sys-prop.*" to="*"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-java">
        <macrodef name="java" uri="http://www.netbeans.org/ns/j2se-project/1">
            <attribute name="classname" default="${main.class}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java fork="true" classname="@{classname}" dir="${work.dir}" jvm="${platform.java}">
                    <jvmarg line="${run.jvmargs}"/>
                    <classpath>
                        <path path="${run.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper type="glob" from="run-sys-prop.*" to="*"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-presetdef-jar">
        <presetdef name="jar" uri="http://www.netbeans.org/ns/j2se-project/1">
            <jar jarfile="${dist.jar}" compress="${jar.compress}">
                <j2seproject1:fileset dir="${build.classes.dir}"/>
            </jar>
        </presetdef>
    </target>
    <target name="init" depends="-pre-init,-init-private,-init-user,-init-project,-do-init,-post-init,-init-check,-init-macrodef-property,-init-macrodef-javac,-init-macrodef-junit,-init-macrodef-nbjpda,-init-macrodef-debug,-init-macrodef-java,-init-presetdef-jar"/>
    <!--
    ===================
    COMPILATION SECTION
    ===================
    -->
    <target name="deps-jar" depends="init" unless="no.deps">
        <ant target="jar" inheritall="false" antfile="${project.Supporto}/build.xml"/>
    </target>
    <target name="wsimport-init" depends="init">
        <mkdir dir="${build.generated.dir}/wsimport/client"/>
        <mkdir dir="${build.generated.dir}/wsimport/binaries"/>
        <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
            <classpath path="${libs.jaxws20.classpath}"/>
        </taskdef>
    </target>
    <target name="wsimport-client-check-WSContatto" depends="wsimport-init">
        <condition property="wsimport-client-WSContatto.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/contattoclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSContatto" depends="wsimport-init,wsimport-client-check-WSContatto" unless="wsimport-client-WSContatto.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.contattoclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSContatto/wsdl/WSContatto.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSContatto/WSContatto.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSContatto" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/contattoclient"/>
    </target>
    <target name="wsimport-client-check-WSVoto" depends="wsimport-init">
        <condition property="wsimport-client-WSVoto.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/votoclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSVoto" depends="wsimport-init,wsimport-client-check-WSVoto" unless="wsimport-client-WSVoto.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.votoclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSVoto/wsdl/WSVoto.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSVoto/WSVoto.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSVoto" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/votoclient"/>
    </target>
    <target name="wsimport-client-check-WSClasse" depends="wsimport-init">
        <condition property="wsimport-client-WSClasse.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/classesupport" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSClasse" depends="wsimport-init,wsimport-client-check-WSClasse" unless="wsimport-client-WSClasse.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.classesupport" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSClasse/wsdl/WSClasse.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSClasse/WSClasse.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSClasse" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/classesupport"/>
    </target>
    <target name="wsimport-client-check-WSAssenza" depends="wsimport-init">
        <condition property="wsimport-client-WSAssenza.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/assenzaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSAssenza" depends="wsimport-init,wsimport-client-check-WSAssenza" unless="wsimport-client-WSAssenza.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.assenzaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSAssenza/wsdl/WSAssenza.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSAssenza/WSAssenza.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSAssenza" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/assenzaclient"/>
    </target>
    <target name="wsimport-client-check-WSTipoAssenza" depends="wsimport-init">
        <condition property="wsimport-client-WSTipoAssenza.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/tipoassenzaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSTipoAssenza" depends="wsimport-init,wsimport-client-check-WSTipoAssenza" unless="wsimport-client-WSTipoAssenza.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.tipoassenzaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSTipoAssenza/wsdl/WSTipoAssenza.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSTipoAssenza/WSTipoAssenza.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSTipoAssenza" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/tipoassenzaclient"/>
    </target>
    <target name="wsimport-client-check-WSTipoVoto" depends="wsimport-init">
        <condition property="wsimport-client-WSTipoVoto.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/tipovotoclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSTipoVoto" depends="wsimport-init,wsimport-client-check-WSTipoVoto" unless="wsimport-client-WSTipoVoto.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.tipovotoclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSTipoVoto/wsdl/WSTipoVoto.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSTipoVoto/WSTipoVoto.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSTipoVoto" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/tipovotoclient"/>
    </target>
    <target name="wsimport-client-check-WSDidaStub" depends="wsimport-init">
        <condition property="wsimport-client-WSDidaStub.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/didastubclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSDidaStub" depends="wsimport-init,wsimport-client-check-WSDidaStub" unless="wsimport-client-WSDidaStub.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.didastubclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSDidaStub/wsdl/WSDidaStub.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSDidaStub/WSDidaStub.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSDidaStub" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/didastubclient"/>
    </target>
    <target name="wsimport-client-check-WSMateria" depends="wsimport-init">
        <condition property="wsimport-client-WSMateria.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/materiaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSMateria" depends="wsimport-init,wsimport-client-check-WSMateria" unless="wsimport-client-WSMateria.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.materiaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSMateria/wsdl/WSMateria.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSMateria/WSMateria.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSMateria" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/materiaclient"/>
    </target>
    <target name="wsimport-client-check-WSPersona" depends="wsimport-init">
        <condition property="wsimport-client-WSPersona.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/personaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSPersona" depends="wsimport-init,wsimport-client-check-WSPersona" unless="wsimport-client-WSPersona.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.personaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSPersona/wsdl/WSPersona.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSPersona/WSPersona.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSPersona" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/personaclient"/>
    </target>
    <target name="wsimport-client-check-WSNazione" depends="wsimport-init">
        <condition property="wsimport-client-WSNazione.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/nazioneclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSNazione" depends="wsimport-init,wsimport-client-check-WSNazione" unless="wsimport-client-WSNazione.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.nazioneclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSNazione/wsdl/WSNazione.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSNazione/WSNazione.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSNazione" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/nazioneclient"/>
    </target>
    <target name="wsimport-client-check-WSReligione" depends="wsimport-init">
        <condition property="wsimport-client-WSReligione.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/religioneclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSReligione" depends="wsimport-init,wsimport-client-check-WSReligione" unless="wsimport-client-WSReligione.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.religioneclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSReligione/wsdl/WSReligione.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSReligione/WSReligione.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSReligione" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/religioneclient"/>
    </target>
    <target name="wsimport-client-check-WSTipoProva" depends="wsimport-init">
        <condition property="wsimport-client-WSTipoProva.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/tipoprovaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-WSTipoProva" depends="wsimport-init,wsimport-client-check-WSTipoProva" unless="wsimport-client-WSTipoProva.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" package="nu.mine.egoless.didattica.ws.tipoprovaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/xml-resources/web-service-references/WSTipoProva/wsdl/WSTipoProva.wsdl" wsdlLocation="file:/C:/PQS/WSDL/WSTipoProva/WSTipoProva.wsdl" catalog="catalog.xml"/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-WSTipoProva" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/didattica/ws/tipoprovaclient"/>
    </target>
    <target name="wsimport-client-generate" depends="wsimport-client-WSContatto, wsimport-client-WSVoto, wsimport-client-WSClasse, wsimport-client-WSAssenza, wsimport-client-WSTipoAssenza, wsimport-client-WSTipoVoto, wsimport-client-WSDidaStub, wsimport-client-WSMateria, wsimport-client-WSPersona, wsimport-client-WSNazione, wsimport-client-WSReligione, wsimport-client-WSTipoProva"/>
    <target name="wsimport-client-compile" depends="-pre-pre-compile">
        <j2seproject3:javac srcdir="${build.generated.dir}/wsimport/client" classpath="${libs.jaxws20.classpath}:${javac.classpath}" destdir="${build.classes.dir}"/>
    </target>
    <target name="-pre-pre-compile" depends="init,deps-jar,wsimport-client-generate">
        <mkdir dir="${build.classes.dir}"/>
    </target>
    <target name="-pre-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-compile" depends="init,deps-jar,-pre-pre-compile,-pre-compile,wsimport-client-compile" if="have.sources">
        <j2seproject3:javac/>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}" excludes="${build.classes.excludes}"/>
        </copy>
    </target>
    <target name="-post-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile" depends="init,deps-jar,-pre-pre-compile,-pre-compile,-do-compile,-post-compile" description="Compile project."/>
    <target name="-pre-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-compile-single" depends="init,deps-jar,-pre-pre-compile,wsimport-client-compile">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <j2seproject3:javac>
            <customize>
                <patternset includes="${javac.includes}"/>
            </customize>
        </j2seproject3:javac>
    </target>
    <target name="-post-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile-single" depends="init,deps-jar,-pre-pre-compile,-pre-compile-single,-do-compile-single,-post-compile-single"/>
    <!--
    ====================
    JAR BUILDING SECTION
    ====================
    -->
    <target name="-pre-pre-jar" depends="init">
        <dirname property="dist.jar.dir" file="${dist.jar}"/>
        <mkdir dir="${dist.jar.dir}"/>
    </target>
    <target name="-pre-jar">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-jar-without-manifest" depends="init,compile,-pre-pre-jar,-pre-jar" unless="manifest.available">
        <j2seproject1:jar/>
    </target>
    <target name="-do-jar-with-manifest" depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available" unless="manifest.available+main.class">
        <j2seproject1:jar manifest="${manifest.file}"/>
    </target>
    <target name="-do-jar-with-mainclass" depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available+main.class" unless="manifest.available+main.class+mkdist.available">
        <j2seproject1:jar manifest="${manifest.file}">
            <j2seproject1:manifest>
                <j2seproject1:attribute name="Main-Class" value="${main.class}"/>
            </j2seproject1:manifest>
        </j2seproject1:jar>
        <echo>To run this application from the command line without Ant, try:</echo>
        <property name="build.classes.dir.resolved" location="${build.classes.dir}"/>
        <property name="dist.jar.resolved" location="${dist.jar}"/>
        <pathconvert property="run.classpath.with.dist.jar">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to="${dist.jar.resolved}"/>
        </pathconvert>
        <echo>${platform.java} -cp "${run.classpath.with.dist.jar}" ${main.class}</echo>
    </target>
    <target name="-do-jar-with-libraries" depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available+main.class+mkdist.available">
        <property name="build.classes.dir.resolved" location="${build.classes.dir}"/>
        <pathconvert property="run.classpath.without.build.classes.dir">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to=""/>
        </pathconvert>
        <pathconvert property="jar.classpath" pathsep=" ">
            <path path="${run.classpath.without.build.classes.dir}"/>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="lib/*"/>
            </chainedmapper>
        </pathconvert>
        <taskdef classname="org.netbeans.modules.java.j2seproject.copylibstask.CopyLibs" name="copylibs" classpath="${libs.CopyLibs.classpath}"/>
        <copylibs manifest="${manifest.file}" runtimeclasspath="${run.classpath.without.build.classes.dir}" jarfile="${dist.jar}" compress="${jar.compress}">
            <fileset dir="${build.classes.dir}"/>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
                <attribute name="Class-Path" value="${jar.classpath}"/>
            </manifest>
        </copylibs>
        <echo>To run this application from the command line without Ant, try:</echo>
        <property name="dist.jar.resolved" location="${dist.jar}"/>
        <echo>${platform.java} -jar "${dist.jar.resolved}"</echo>
    </target>
    <target name="-post-jar">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="jar" depends="init,compile,-pre-jar,-do-jar-with-manifest,-do-jar-without-manifest,-do-jar-with-mainclass,-do-jar-with-libraries,-post-jar" description="Build JAR."/>
    <!--
    =================
    EXECUTION SECTION
    =================
    -->
    <target name="run" depends="init,compile" description="Run a main class.">
        <j2seproject1:java>
            <customize>
                <arg line="${application.args}"/>
            </customize>
        </j2seproject1:java>
    </target>
    <target name="run-single" depends="init,compile-single">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <j2seproject1:java classname="${run.class}"/>
    </target>
    <!--
    =================
    DEBUGGING SECTION
    =================
    -->
    <target name="-debug-start-debugger" if="netbeans.home" depends="init">
        <j2seproject1:nbjpdastart name="${debug.class}"/>
    </target>
    <target name="-debug-start-debuggee" depends="init,compile">
        <j2seproject3:debug>
            <customize>
                <arg line="${application.args}"/>
            </customize>
        </j2seproject3:debug>
    </target>
    <target name="debug" if="netbeans.home" depends="init,compile,-debug-start-debugger,-debug-start-debuggee" description="Debug project in IDE."/>
    <target name="-debug-start-debugger-stepinto" if="netbeans.home" depends="init">
        <j2seproject1:nbjpdastart stopclassname="${main.class}"/>
    </target>
    <target name="debug-stepinto" if="netbeans.home" depends="init,compile,-debug-start-debugger-stepinto,-debug-start-debuggee"/>
    <target name="-debug-start-debuggee-single" if="netbeans.home" depends="init,compile-single">
        <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
        <j2seproject3:debug classname="${debug.class}"/>
    </target>
    <target name="debug-single" if="netbeans.home" depends="init,compile-single,-debug-start-debugger,-debug-start-debuggee-single"/>
    <target name="-pre-debug-fix" depends="init">
        <fail unless="fix.includes">Must set fix.includes</fail>
        <property name="javac.includes" value="${fix.includes}.java"/>
    </target>
    <target name="-do-debug-fix" if="netbeans.home" depends="init,-pre-debug-fix,compile-single">
        <j2seproject1:nbjpdareload/>
    </target>
    <target name="debug-fix" if="netbeans.home" depends="init,-pre-debug-fix,-do-debug-fix"/>
    <!--
    ===============
    JAVADOC SECTION
    ===============
    -->
    <target name="-javadoc-build" depends="init">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc destdir="${dist.javadoc.dir}" source="${javac.source}" notree="${javadoc.notree}" use="${javadoc.use}" nonavbar="${javadoc.nonavbar}" noindex="${javadoc.noindex}" splitindex="${javadoc.splitindex}" author="${javadoc.author}" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}" private="${javadoc.private}" additionalparam="${javadoc.additionalparam}" failonerror="true" useexternalfile="true" executable="${platform.javadoc}">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <sourcepath>
                <pathelement location="${src.dir}"/>
            </sourcepath>
            <packageset dir="${src.dir}" includes="*/**"/>
            <fileset dir="${src.dir}" includes="*.java"/>
        </javadoc>
    </target>
    <target name="-javadoc-browse" if="netbeans.home" unless="no.javadoc.preview" depends="init,-javadoc-build">
        <nbbrowse file="${dist.javadoc.dir}/index.html"/>
    </target>
    <target name="javadoc" depends="init,-javadoc-build,-javadoc-browse" description="Build Javadoc."/>
    <!--
    =========================
    JUNIT COMPILATION SECTION
    =========================
    -->
    <target name="-pre-pre-compile-test" if="have.tests" depends="init,compile">
        <mkdir dir="${build.test.classes.dir}"/>
    </target>
    <target name="-pre-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-compile-test" if="have.tests" depends="init,compile,-pre-pre-compile-test,-pre-compile-test">
        <j2seproject3:javac srcdir="${test.src.dir}" destdir="${build.test.classes.dir}" debug="true" classpath="${javac.test.classpath}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="**/*.java"/>
        </copy>
    </target>
    <target name="-post-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile-test" depends="init,compile,-pre-pre-compile-test,-pre-compile-test,-do-compile-test,-post-compile-test"/>
    <target name="-pre-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-compile-test-single" if="have.tests" depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <j2seproject3:javac srcdir="${test.src.dir}" destdir="${build.test.classes.dir}" debug="true" classpath="${javac.test.classpath}">
            <customize>
                <patternset includes="${javac.includes}"/>
            </customize>
        </j2seproject3:javac>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="**/*.java"/>
        </copy>
    </target>
    <target name="-post-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile-test-single" depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single,-do-compile-test-single,-post-compile-test-single"/>
    <!--
    =======================
    JUNIT EXECUTION SECTION
    =======================
    -->
    <target name="-pre-test-run" if="have.tests" depends="init">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target name="-do-test-run" if="have.tests" depends="init,compile-test,-pre-test-run">
        <j2seproject3:junit/>
    </target>
    <target name="-post-test-run" if="have.tests" depends="init,compile-test,-pre-test-run,-do-test-run">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target name="test-report" if="have.tests" depends="init"/>
    <target name="-test-browse" if="netbeans.home+have.tests" depends="init"/>
    <target name="test" depends="init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse" description="Run unit tests."/>
    <target name="-pre-test-run-single" if="have.tests" depends="init">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target name="-do-test-run-single" if="have.tests" depends="init,compile-test-single,-pre-test-run-single">
        <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
        <j2seproject3:junit includes="${test.includes}"/>
    </target>
    <target name="-post-test-run-single" if="have.tests" depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target name="test-single" depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single,-post-test-run-single" description="Run single unit test."/>
    <!--
    =======================
    JUNIT DEBUGGING SECTION
    =======================
    -->
    <target name="-debug-start-debuggee-test" if="have.tests" depends="init,compile-test">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <j2seproject3:debug classname="junit.textui.TestRunner" classpath="${debug.test.classpath}">
            <customize>
                <arg line="${test.class}"/>
            </customize>
        </j2seproject3:debug>
    </target>
    <target name="-debug-start-debugger-test" if="netbeans.home+have.tests" depends="init,compile-test">
        <j2seproject1:nbjpdastart name="${test.class}" classpath="${debug.test.classpath}"/>
    </target>
    <target name="debug-test" depends="init,compile-test,-debug-start-debugger-test,-debug-start-debuggee-test"/>
    <target name="-do-debug-fix-test" if="netbeans.home" depends="init,-pre-debug-fix,compile-test-single">
        <j2seproject1:nbjpdareload dir="${build.test.classes.dir}"/>
    </target>
    <target name="debug-fix-test" if="netbeans.home" depends="init,-pre-debug-fix,-do-debug-fix-test"/>
    <!--
    =========================
    APPLET EXECUTION SECTION
    =========================
    -->
    <target name="run-applet" depends="init,compile-single">
        <fail unless="applet.url">Must select one file in the IDE or set applet.url</fail>
        <j2seproject1:java classname="sun.applet.AppletViewer">
            <customize>
                <arg value="${applet.url}"/>
            </customize>
        </j2seproject1:java>
    </target>
    <!--
    =========================
    APPLET DEBUGGING  SECTION
    =========================
    -->
    <target name="-debug-start-debuggee-applet" if="netbeans.home" depends="init,compile-single">
        <fail unless="applet.url">Must select one file in the IDE or set applet.url</fail>
        <j2seproject3:debug classname="sun.applet.AppletViewer">
            <customize>
                <arg value="${applet.url}"/>
            </customize>
        </j2seproject3:debug>
    </target>
    <target name="debug-applet" if="netbeans.home" depends="init,compile-single,-debug-start-debugger,-debug-start-debuggee-applet"/>
    <!--
    ===============
    CLEANUP SECTION
    ===============
    -->
    <target name="deps-clean" depends="init" unless="no.deps">
        <ant target="clean" inheritall="false" antfile="${project.Supporto}/build.xml"/>
    </target>
    <target name="-do-clean" depends="init">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    <target name="-post-clean">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="clean" depends="init,deps-clean,-do-clean,-post-clean" description="Clean build products."/>
</project>
