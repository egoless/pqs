<?xml version="1.0" encoding="UTF-8"?>
<!--
*** GENERATED FROM project.xml - DO NOT EDIT  ***
***         EDIT ../build.xml INSTEAD         ***

For the purpose of easier reading the script
is divided into following sections:

  - initialization
  - compilation
  - dist
  - execution
  - debugging
  - javadoc
  - cleanup

        -->
<project name="WSDidattica-impl" default="build" basedir=".." xmlns:ejbjarproject3="http://www.netbeans.org/ns/j2ee-ejbjarproject/3" xmlns:ejbjarproject2="http://www.netbeans.org/ns/j2ee-ejbjarproject/2" xmlns:ejbjarproject1="http://www.netbeans.org/ns/j2ee-ejbjarproject/1" xmlns:jaxws="http://www.netbeans.org/ns/jax-ws/1">
    <import file="ant-deploy.xml"/>
    <target name="default" depends="dist,javadoc" description="Build whole project."/>
    <!-- 
                INITIALIZATION SECTION 
            -->
    <target name="-pre-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-init-private" depends="-pre-init">
        <property file="nbproject/private/private.properties"/>
    </target>
    <target name="-init-userdir" depends="-pre-init,-init-private">
        <property name="user.properties.file" location="${netbeans.user}/build.properties"/>
    </target>
    <target name="-init-user" depends="-pre-init,-init-private,-init-userdir">
        <property file="${user.properties.file}"/>
    </target>
    <target name="-init-project" depends="-pre-init,-init-private,-init-userdir,-init-user">
        <property file="nbproject/project.properties"/>
    </target>
    <target name="-do-init" depends="-pre-init,-init-private,-init-userdir,-init-user,-init-project,-init-macrodef-property">
        <ejbjarproject1:property name="platform.home" value="platforms.${platform.active}.home"/>
        <ejbjarproject1:property name="platform.bootcp" value="platforms.${platform.active}.bootclasspath"/>
        <ejbjarproject1:property name="platform.compiler" value="platforms.${platform.active}.compile"/>
        <ejbjarproject1:property name="platform.javac.tmp" value="platforms.${platform.active}.javac"/>
        <condition property="platform.javac" value="${platform.home}/bin/javac">
            <equals arg1="${platform.javac.tmp}" arg2="$${platforms.${platform.active}.javac}"/>
        </condition>
        <property name="platform.javac" value="${platform.javac.tmp}"/>
        <ejbjarproject1:property name="platform.java.tmp" value="platforms.${platform.active}.java"/>
        <condition property="platform.java" value="${platform.home}/bin/java">
            <equals arg1="${platform.java.tmp}" arg2="$${platforms.${platform.active}.java}"/>
        </condition>
        <property name="platform.java" value="${platform.java.tmp}"/>
        <ejbjarproject1:property name="platform.javadoc.tmp" value="platforms.${platform.active}.javadoc"/>
        <condition property="platform.javadoc" value="${platform.home}/bin/javadoc">
            <equals arg1="${platform.javadoc.tmp}" arg2="$${platforms.${platform.active}.javadoc}"/>
        </condition>
        <property name="platform.javadoc" value="${platform.javadoc.tmp}"/>
        <condition property="platform.invalid" value="true">
            <or>
                <contains string="${platform.javac}" substring="$${platforms."/>
                <contains string="${platform.java}" substring="$${platforms."/>
                <contains string="${platform.javadoc}" substring="$${platforms."/>
            </or>
        </condition>
        <fail unless="platform.home">Must set platform.home</fail>
        <fail unless="platform.bootcp">Must set platform.bootcp</fail>
        <fail unless="platform.java">Must set platform.java</fail>
        <fail unless="platform.javac">Must set platform.javac</fail>
        <fail if="platform.invalid">Platform is not correctly set up</fail>
        <!-- Ensure configuration directory exists. -->
        <mkdir dir="${meta.inf}"/>
        <!-- The two properties below are usually overridden -->
        <!-- by the active platform. Just a fallback. -->
        <property name="default.javac.source" value="1.4"/>
        <property name="default.javac.target" value="1.4"/>
        <property name="runmain.jvmargs" value=""/>
        <condition property="have.tests">
            <or>
                <available file="${test.src.dir}"/>
            </or>
        </condition>
        <condition property="have.sources">
            <or>
                <available file="${src.dir}"/>
            </or>
        </condition>
        <condition property="netbeans.home+have.tests">
            <and>
                <isset property="netbeans.home"/>
                <isset property="have.tests"/>
            </and>
        </condition>
        <condition property="no.javadoc.preview">
            <isfalse value="${javadoc.preview}"/>
        </condition>
        <available file="${meta.inf}/MANIFEST.MF" property="has.custom.manifest"/>
        <condition property="classes.dir" value="${build.ear.classes.dir}">
            <isset property="dist.ear.dir"/>
        </condition>
        <property name="classes.dir" value="${build.classes.dir}"/>
        <condition property="no.deps">
            <and>
                <istrue value="${no.dependencies}"/>
            </and>
        </condition>
        <condition property="no.dist.ear.dir">
            <not>
                <isset property="dist.ear.dir"/>
            </not>
        </condition>
    </target>
    <target name="-post-init">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-init-check" depends="-pre-init,-init-private,-init-userdir,-init-user,-init-project,-do-init">
        <fail unless="src.dir">Must set src.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="build.generated.dir">Must set build.generated.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.jar">Must set dist.jar</fail>
    </target>
    <target name="-init-macrodef-property">
        <macrodef name="property" uri="http://www.netbeans.org/ns/j2ee-ejbjarproject/1">
            <attribute name="name"/>
            <attribute name="value"/>
            <sequential>
                <property name="@{name}" value="${@{value}}"/>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-javac">
        <macrodef name="javac" uri="http://www.netbeans.org/ns/j2ee-ejbjarproject/2">
            <attribute name="srcdir" default="${src.dir}"/>
            <attribute name="destdir" default="${build.classes.dir}"/>
            <attribute name="classpath" default="${javac.classpath}:${j2ee.platform.classpath}"/>
            <attribute name="debug" default="${javac.debug}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <property name="javac.compilerargs" value=""/>
                <javac srcdir="@{srcdir}" destdir="@{destdir}" debug="@{debug}" deprecation="${javac.deprecation}" source="${javac.source}" target="${javac.target}" fork="yes" executable="${platform.javac}" includeantruntime="false">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <compilerarg line="${javac.compilerargs}"/>
                    <customize/>
                </javac>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-junit">
        <macrodef name="junit" uri="http://www.netbeans.org/ns/j2ee-ejbjarproject/2">
            <attribute name="includes" default="**/*Test.java"/>
            <sequential>
                <junit showoutput="true" fork="true" dir="${basedir}" failureproperty="tests.failed" errorproperty="tests.failed" jvm="${platform.java}">
                    <batchtest todir="${build.test.results.dir}">
                        <fileset dir="${test.src.dir}" includes="@{includes}"/>
                    </batchtest>
                    <classpath>
                        <path path="${run.test.classpath}"/>
                        <path path="${j2ee.platform.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="test-sys-prop."/>
                        <mapper type="glob" from="test-sys-prop.*" to="*"/>
                    </syspropertyset>
                    <formatter type="brief" usefile="false"/>
                    <formatter type="xml"/>
                </junit>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-java">
        <macrodef name="java" uri="http://www.netbeans.org/ns/j2ee-ejbjarproject/3">
            <attribute name="classname" default="${main.class}"/>
            <element name="customize" optional="true"/>
            <sequential>
                <java fork="true" classname="@{classname}" jvm="${platform.java}">
                    <jvmarg line="${runmain.jvmargs}"/>
                    <classpath>
                        <path path="${build.classes.dir}:${javac.classpath}:${j2ee.platform.classpath}"/>
                    </classpath>
                    <syspropertyset>
                        <propertyref prefix="run-sys-prop."/>
                        <mapper type="glob" from="run-sys-prop.*" to="*"/>
                    </syspropertyset>
                    <customize/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-nbjpda">
        <macrodef name="nbjpdastart" uri="http://www.netbeans.org/ns/j2ee-ejbjarproject/1">
            <attribute name="name" default="${main.class}"/>
            <attribute name="classpath" default="${debug.classpath}"/>
            <sequential>
                <nbjpdastart transport="dt_socket" addressproperty="jpda.address" name="@{name}">
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <bootclasspath>
                        <path path="${platform.bootcp}"/>
                    </bootclasspath>
                </nbjpdastart>
            </sequential>
        </macrodef>
        <macrodef name="nbjpdareload" uri="http://www.netbeans.org/ns/j2ee-ejbjarproject/1">
            <attribute name="dir" default="${build.classes.dir}"/>
            <sequential>
                <nbjpdareload>
                    <fileset includes="${fix.includes}*.class" dir="@{dir}"/>
                </nbjpdareload>
            </sequential>
        </macrodef>
    </target>
    <target name="-init-macrodef-debug">
        <macrodef name="debug" uri="http://www.netbeans.org/ns/j2ee-ejbjarproject/1">
            <attribute name="classname" default="${main.class}"/>
            <attribute name="classpath" default="${debug.classpath}"/>
            <attribute name="args" default="${application.args}"/>
            <sequential>
                <java fork="true" classname="@{classname}" jvm="${platform.java}">
                    <bootclasspath>
                        <path path="${platform.bootcp}"/>
                    </bootclasspath>
                    <jvmarg value="-Xdebug"/>
                    <jvmarg value="-Xnoagent"/>
                    <jvmarg value="-Djava.compiler=none"/>
                    <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
                    <classpath>
                        <path path="@{classpath}"/>
                    </classpath>
                    <arg line="@{args}"/>
                </java>
            </sequential>
        </macrodef>
    </target>
    <target name="init" depends="-pre-init,-init-private,-init-userdir,-init-user,-init-project,-do-init,-post-init,-init-check,-init-macrodef-property,-init-macrodef-javac,-init-macrodef-junit,-init-macrodef-java,-init-macrodef-nbjpda,-init-macrodef-debug"/>
    <!--
                COMPILATION SECTION
            -->
    <target name="-deps-module-jar" depends="init" if="no.dist.ear.dir" unless="no.deps">
        <ant target="jar" inheritall="false" antfile="${project.Supporto}/build.xml"/>
    </target>
    <target name="-deps-ear-jar" depends="init" if="dist.ear.dir" unless="no.deps">
        <ant target="jar" inheritall="false" antfile="${project.Supporto}/build.xml"/>
    </target>
    <target name="deps-jar" depends="init, -deps-module-jar, -deps-ear-jar"/>
    <target name="wsgen-init" depends="init">
        <mkdir dir="${build.generated.dir}/wsgen/service"/>
        <mkdir dir="${classes.dir}"/>
        <taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen">
            <classpath path="${j2ee.platform.wsgen.classpath}"/>
        </taskdef>
    </target>
    <target name="wsgen-WSTipoVoto" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSTipoVoto">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSClasse" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSClasse">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSMateria" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSMateria">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSReligione" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSReligione">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSTipoProva" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSTipoProva">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSNazione" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSNazione">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSAssenza" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSAssenza">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSVoto" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSVoto">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSContatto" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSContatto">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSTipoAssenza" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSTipoAssenza">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-WSPersona" depends="wsgen-init, compile">
        <wsgen sourcedestdir="${build.generated.dir}/wsgen/service" resourcedestdir="${build.generated.dir}/wsgen/service" keep="false" genwsdl="true" sei="nu.mine.egoless.didattica.ws.WSPersona">
            <classpath path="${classes.dir}:${j2ee.platform.wsgen.classpath}:${javac.classpath}"/>
        </wsgen>
    </target>
    <target name="wsgen-generate" depends="wsgen-WSTipoVoto, wsgen-WSClasse, wsgen-WSMateria, wsgen-WSReligione, wsgen-WSTipoProva, wsgen-WSNazione, wsgen-WSAssenza, wsgen-WSVoto, wsgen-WSContatto, wsgen-WSTipoAssenza, wsgen-WSPersona"/>
    <target name="wsimport-init" depends="init">
        <mkdir dir="${build.generated.dir}/wsimport/client"/>
        <mkdir dir="${build.generated.dir}/wsimport/binaries"/>
        <mkdir dir="${classes.dir}"/>
        <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport">
            <classpath path="${j2ee.platform.wsimport.classpath}"/>
        </taskdef>
    </target>
    <target name="wsimport-client-check-PersonaWSService" depends="wsimport-init">
        <condition property="wsimport-client-PersonaWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/personaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-PersonaWSService" depends="wsimport-init,wsimport-client-check-PersonaWSService" unless="wsimport-client-PersonaWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.personaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/PersonaWSService/wsdl/PersonaWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/PersonaWS/PersonaWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-PersonaWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/personaclient"/>
    </target>
    <target name="wsimport-client-check-NazioneWSService" depends="wsimport-init">
        <condition property="wsimport-client-NazioneWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/nazioneclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-NazioneWSService" depends="wsimport-init,wsimport-client-check-NazioneWSService" unless="wsimport-client-NazioneWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.nazioneclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/NazioneWSService/wsdl/NazioneWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/NazioneWS/NazioneWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-NazioneWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/nazioneclient"/>
    </target>
    <target name="wsimport-client-check-ReligioneWSService" depends="wsimport-init">
        <condition property="wsimport-client-ReligioneWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/religioneclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-ReligioneWSService" depends="wsimport-init,wsimport-client-check-ReligioneWSService" unless="wsimport-client-ReligioneWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.religioneclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/ReligioneWSService/wsdl/ReligioneWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/ReligioneWS/ReligioneWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-ReligioneWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/religioneclient"/>
    </target>
    <target name="wsimport-client-check-TipoAssenzaWSService" depends="wsimport-init">
        <condition property="wsimport-client-TipoAssenzaWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/tipoassenzaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-TipoAssenzaWSService" depends="wsimport-init,wsimport-client-check-TipoAssenzaWSService" unless="wsimport-client-TipoAssenzaWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.tipoassenzaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/TipoAssenzaWSService/wsdl/TipoAssenzaWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/TipoAssenzaWS/TipoAssenzaWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-TipoAssenzaWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/tipoassenzaclient"/>
    </target>
    <target name="wsimport-client-check-ClasseWSService" depends="wsimport-init">
        <condition property="wsimport-client-ClasseWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/classeclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-ClasseWSService" depends="wsimport-init,wsimport-client-check-ClasseWSService" unless="wsimport-client-ClasseWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.classeclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/ClasseWSService/wsdl/ClasseWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/ClasseWS/ClasseWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-ClasseWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/classeclient"/>
    </target>
    <target name="wsimport-client-check-MateriaInsegnamentoWSService" depends="wsimport-init">
        <condition property="wsimport-client-MateriaInsegnamentoWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/materiaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-MateriaInsegnamentoWSService" depends="wsimport-init,wsimport-client-check-MateriaInsegnamentoWSService" unless="wsimport-client-MateriaInsegnamentoWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.materiaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/MateriaInsegnamentoWSService/wsdl/MateriaInsegnamentoWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/MateriaInsegnamentoWS/MateriaInsegnamentoWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-MateriaInsegnamentoWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/materiaclient"/>
    </target>
    <target name="wsimport-client-check-AssenzaWSService" depends="wsimport-init">
        <condition property="wsimport-client-AssenzaWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/assenzaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-AssenzaWSService" depends="wsimport-init,wsimport-client-check-AssenzaWSService" unless="wsimport-client-AssenzaWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.assenzaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/AssenzaWSService/wsdl/AssenzaWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/AssenzaWS/AssenzaWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-AssenzaWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/assenzaclient"/>
    </target>
    <target name="wsimport-client-check-TipoProvaWSService" depends="wsimport-init">
        <condition property="wsimport-client-TipoProvaWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/tipoprovaclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-TipoProvaWSService" depends="wsimport-init,wsimport-client-check-TipoProvaWSService" unless="wsimport-client-TipoProvaWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.tipoprovaclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/TipoProvaWSService/wsdl/TipoProvaWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/TipoProvaWS/TipoProvaWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-TipoProvaWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/tipoprovaclient"/>
    </target>
    <target name="wsimport-client-check-TipoVotoWSService" depends="wsimport-init">
        <condition property="wsimport-client-TipoVotoWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/tipovotoclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-TipoVotoWSService" depends="wsimport-init,wsimport-client-check-TipoVotoWSService" unless="wsimport-client-TipoVotoWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.tipovotoclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/TipoVotoWSService/wsdl/TipoVotoWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/TipoVotoWS/TipoVotoWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-TipoVotoWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/tipovotoclient"/>
    </target>
    <target name="wsimport-client-check-VotoWSService" depends="wsimport-init">
        <condition property="wsimport-client-VotoWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/votoclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-VotoWSService" depends="wsimport-init,wsimport-client-check-VotoWSService" unless="wsimport-client-VotoWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.votoclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/VotoWSService/wsdl/VotoWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/VotoWS/VotoWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-VotoWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/votoclient"/>
    </target>
    <target name="wsimport-client-check-ContattoWSService" depends="wsimport-init">
        <condition property="wsimport-client-ContattoWSService.notRequired">
            <available file="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/contattoclient" type="dir"/>
        </condition>
    </target>
    <target name="wsimport-client-ContattoWSService" depends="wsimport-init,wsimport-client-check-ContattoWSService" unless="wsimport-client-ContattoWSService.notRequired">
        <wsimport sourcedestdir="${build.generated.dir}/wsimport/client" extension="true" package="nu.mine.egoless.ws.contattoclient" destdir="${build.generated.dir}/wsimport/binaries" wsdl="${basedir}/${meta.inf}/xml-resources/web-service-references/ContattoWSService/wsdl/ContattoWSService.wsdl" wsdlLocation="file:/c:/ProgettoFinale/wsdl/swell/ContattoWS/ContattoWSService.wsdl" catalog="catalog.xml"/>
        <copy todir="${classes.dir}">
            <fileset dir="${build.generated.dir}/wsimport/binaries" includes="**/*.xml"/>
        </copy>
    </target>
    <target name="wsimport-client-clean-ContattoWSService" depends="-init-project">
        <delete dir="${build.generated.dir}/wsimport/client/nu/mine/egoless/ws/contattoclient"/>
    </target>
    <target name="wsimport-client-generate" depends="wsimport-client-PersonaWSService, wsimport-client-NazioneWSService, wsimport-client-ReligioneWSService, wsimport-client-TipoAssenzaWSService, wsimport-client-ClasseWSService, wsimport-client-MateriaInsegnamentoWSService, wsimport-client-AssenzaWSService, wsimport-client-TipoProvaWSService, wsimport-client-TipoVotoWSService, wsimport-client-VotoWSService, wsimport-client-ContattoWSService"/>
    <target name="wsimport-client-compile" depends="wsimport-client-generate">
        <ejbjarproject2:javac srcdir="${build.generated.dir}/wsimport/client" classpath="${j2ee.platform.wsimport.classpath}:${javac.classpath}" destdir="${classes.dir}"/>
    </target>
    <target name="-pre-pre-compile" depends="init,deps-jar,wsimport-client-generate">
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.ear.classes.dir}"/>
    </target>
    <target name="-pre-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="library-inclusion-in-archive" depends="compile">
        <copy file="${reference.Supporto.jar}" todir="${build.classes.dir}"/>
    </target>
    <target name="library-inclusion-in-manifest" depends="compile">
        <basename property="included.lib.reference.Supporto.jar" file="${reference.Supporto.jar}"/>
        <copy file="${reference.Supporto.jar}" todir="${dist.ear.dir}"/>
        <manifest file="${build.ear.classes.dir}/META-INF/MANIFEST.MF" mode="update">
            <attribute name="Class-Path" value="${included.lib.reference.Supporto.jar} "/>
        </manifest>
    </target>
    <target name="-copy-meta-inf">
        <copy todir="${classes.dir}">
            <fileset dir="${meta.inf}" includes="**/*.dbschema"/>
        </copy>
        <copy todir="${classes.dir}/META-INF">
            <fileset dir="${meta.inf}" excludes="**/*.dbschema **/xml-resources/** ${meta.inf.excludes}"/>
        </copy>
    </target>
    <target name="-do-compile" depends="init,deps-jar,-pre-pre-compile,-pre-compile,-copy-meta-inf,wsimport-client-compile" if="have.sources">
        <ejbjarproject2:javac destdir="${classes.dir}"/>
        <copy todir="${classes.dir}">
            <fileset dir="${src.dir}" excludes="${build.classes.excludes}"/>
        </copy>
    </target>
    <target name="-post-compile">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile" depends="init,deps-jar,-pre-pre-compile,-pre-compile,-do-compile,-post-compile" description="Compile project."/>
    <target name="-pre-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-compile-single" depends="init,deps-jar,-pre-pre-compile,wsimport-client-compile">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <ejbjarproject2:javac>
            <customize>
                <include name="${javac.includes}"/>
            </customize>
        </ejbjarproject2:javac>
    </target>
    <target name="-post-compile-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile-single" depends="init,deps-jar,-pre-pre-compile,-pre-compile-single,-do-compile-single,-post-compile-single"/>
    <!--
                DIST BUILDING SECTION
            -->
    <target name="-pre-dist">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-dist-with-manifest" depends="init,compile,-pre-dist,library-inclusion-in-archive" if="has.custom.manifest">
        <dirname property="dist.jar.dir" file="${dist.jar}"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar jarfile="${dist.jar}" compress="${jar.compress}" manifest="${build.classes.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>
    <target name="-do-dist-without-manifest" depends="init,compile,-pre-dist,library-inclusion-in-archive" unless="has.custom.manifest">
        <dirname property="dist.jar.dir" file="${dist.jar}"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar jarfile="${dist.jar}" compress="${jar.compress}">
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>
    <target name="-do-dist" depends="init,compile,-pre-dist,library-inclusion-in-archive, -do-dist-without-manifest, -do-dist-with-manifest"/>
    <target name="-do-ear-dist" depends="init,compile,-pre-dist,library-inclusion-in-manifest">
        <dirname property="dist.jar.dir" file="${dist.ear.jar}"/>
        <mkdir dir="${dist.jar.dir}"/>
        <jar jarfile="${dist.ear.jar}" compress="${jar.compress}" manifest="${build.ear.classes.dir}/META-INF/MANIFEST.MF">
            <fileset dir="${build.ear.classes.dir}"/>
        </jar>
    </target>
    <target name="-post-dist">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="dist" depends="init,compile,-pre-dist,-do-dist,-post-dist" description="Build distribution (JAR)."/>
    <target name="dist-ear" depends="init,compile,-pre-dist,-do-ear-dist,-post-dist" description="Build distribution (JAR) to be packaged into an EAR."/>
    <!--
                EXECUTION SECTION
            -->
    <target name="run" depends="run-deploy" description="Deploy to server."/>
    <target name="-init-deploy">
        <property name="include.jar.manifest" value=""/>
    </target>
    <target name="pre-run-deploy">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="post-run-deploy">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-pre-nbmodule-run-deploy">
        <!-- Empty placeholder for easier customization. -->
        <!-- This target can be overriden by NetBeans modules. Don't override it directly, use -pre-run-deploy task instead. -->
    </target>
    <target name="-post-nbmodule-run-deploy">
        <!-- Empty placeholder for easier customization. -->
        <!-- This target can be overriden by NetBeans modules. Don't override it directly, use -post-run-deploy task instead. -->
    </target>
    <target name="-run-deploy-am">
        <!-- Task to deploy to the Access Manager runtime. -->
    </target>
    <target name="run-deploy" depends="init,-init-deploy,compile,library-inclusion-in-archive,dist,pre-run-deploy,-pre-nbmodule-run-deploy,-run-deploy-nb,-init-deploy-ant,-deploy-ant,-run-deploy-am,-post-nbmodule-run-deploy,post-run-deploy"/>
    <target name="-run-deploy-nb" if="netbeans.home">
        <nbdeploy debugmode="false" forceRedeploy="${forceRedeploy}"/>
    </target>
    <target name="-init-deploy-ant" unless="netbeans.home">
        <property name="deploy.ant.archive" value="${dist.jar}"/>
        <property name="deploy.ant.resource.dir" value="${resource.dir}"/>
        <property name="deploy.ant.enabled" value="true"/>
    </target>
    <target name="run-undeploy" depends="dist,-run-undeploy-nb,-init-deploy-ant,-undeploy-ant"/>
    <target name="-run-undeploy-nb" if="netbeans.home">
        <fail message="Undeploy is not supported from within the IDE"/>
    </target>
    <target name="verify" depends="dist">
        <nbverify file="${dist.jar}"/>
    </target>
    <target name="run-main" depends="init,compile-single">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <ejbjarproject3:java classname="${run.class}"/>
    </target>
    <!--
                DEBUGGING SECTION
            -->
    <target name="debug" description="Debug project in IDE." depends="init,compile,dist" if="netbeans.home">
        <nbdeploy debugmode="true"/>
        <antcall target="connect-debugger"/>
    </target>
    <target name="connect-debugger" unless="is.debugged">
        <nbjpdaconnect name="${name}" host="${jpda.host}" address="${jpda.address}" transport="${jpda.transport}">
            <classpath>
                <path path="${debug.classpath}"/>
            </classpath>
            <sourcepath>
                <path path="${web.docbase.dir}"/>
            </sourcepath>
            <bootclasspath>
                <path path="${platform.bootcp}"/>
            </bootclasspath>
        </nbjpdaconnect>
    </target>
    <target name="-debug-start-debugger" if="netbeans.home" depends="init">
        <ejbjarproject1:nbjpdastart/>
    </target>
    <target name="-debug-start-debuggee-single" if="netbeans.home" depends="init,compile-single">
        <fail unless="main.class">Must select one file in the IDE or set main.class</fail>
        <ejbjarproject1:debug/>
    </target>
    <target name="debug-single-main" if="netbeans.home" depends="init,compile-single,-debug-start-debugger,-debug-start-debuggee-single"/>
    <target name="-pre-debug-fix" depends="init">
        <fail unless="fix.includes">Must set fix.includes</fail>
        <property name="javac.includes" value="${fix.includes}.java"/>
    </target>
    <target name="-do-debug-fix" if="netbeans.home" depends="init,-pre-debug-fix,compile-single">
        <ejbjarproject1:nbjpdareload/>
    </target>
    <target name="debug-fix" if="netbeans.home" depends="init,-pre-debug-fix,-do-debug-fix"/>
    <!--
                JAVADOC SECTION
            -->
    <target name="javadoc-build" depends="init">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc destdir="${dist.javadoc.dir}" source="${javac.source}" notree="${javadoc.notree}" use="${javadoc.use}" nonavbar="${javadoc.nonavbar}" noindex="${javadoc.noindex}" splitindex="${javadoc.splitindex}" author="${javadoc.author}" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}" private="${javadoc.private}" additionalparam="${javadoc.additionalparam}" failonerror="true" useexternalfile="true" executable="${platform.javadoc}">
            <classpath>
                <path path="${javac.classpath}:${j2ee.platform.classpath}"/>
            </classpath>
            <sourcepath>
                <pathelement location="${src.dir}"/>
            </sourcepath>
            <packageset dir="${src.dir}" includes="*/**"/>
            <fileset dir="${src.dir}" includes="*.java"/>
        </javadoc>
    </target>
    <target name="javadoc-browse" if="netbeans.home" unless="no.javadoc.preview" depends="init,javadoc-build">
        <nbbrowse file="${dist.javadoc.dir}/index.html"/>
    </target>
    <target name="javadoc" depends="init,javadoc-build,javadoc-browse" description="Build Javadoc."/>
    <!--
                JUNIT COMPILATION SECTION
            -->
    <target name="-pre-pre-compile-test" if="have.tests" depends="init,compile">
        <mkdir dir="${build.test.classes.dir}"/>
    </target>
    <target name="-pre-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-compile-test" if="have.tests" depends="init,compile,-pre-pre-compile-test,-pre-compile-test">
        <ejbjarproject2:javac srcdir="${test.src.dir}" destdir="${build.test.classes.dir}" debug="true" classpath="${javac.test.classpath}:${j2ee.platform.classpath}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="**/*.java"/>
        </copy>
    </target>
    <target name="-post-compile-test">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile-test" depends="init,compile,-pre-pre-compile-test,-pre-compile-test,-do-compile-test,-post-compile-test"/>
    <target name="-pre-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="-do-compile-test-single" if="have.tests" depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes</fail>
        <ejbjarproject2:javac srcdir="${test.src.dir}" destdir="${build.test.classes.dir}" debug="true" classpath="${javac.test.classpath}:${j2ee.platform.classpath}">
            <customize>
                <patternset includes="${javac.includes}"/>
            </customize>
        </ejbjarproject2:javac>
    </target>
    <target name="-post-compile-test-single">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="compile-test-single" depends="init,compile,-pre-pre-compile-test,-pre-compile-test-single,-do-compile-test-single,-post-compile-test-single"/>
    <!--
                JUNIT EXECUTION SECTION
            -->
    <target name="-pre-test-run" if="have.tests" depends="init">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target name="-do-test-run" if="have.tests" depends="init,compile-test,-pre-test-run">
        <ejbjarproject2:junit/>
    </target>
    <target name="-post-test-run" if="have.tests" depends="init,compile-test,-pre-test-run,-do-test-run">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target name="test-report" if="have.tests" depends="init"/>
    <target name="-test-browse" if="netbeans.home+have.tests" depends="init"/>
    <target name="test" depends="init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse" description="Run unit tests."/>
    <target name="-pre-test-run-single" if="have.tests" depends="init">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target name="-do-test-run-single" if="have.tests" depends="init,compile-test-single,-pre-test-run-single">
        <fail unless="test.includes">Must select some files in the IDE or set test.includes</fail>
        <ejbjarproject2:junit includes="${test.includes}"/>
    </target>
    <target name="-post-test-run-single" if="have.tests" depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target name="test-single" depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single,-post-test-run-single" description="Run single unit test."/>
    <!--
                JUNIT DEBUGGING SECTION
            -->
    <target name="-debug-start-debuggee-test" if="have.tests" depends="init,compile-test">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <ejbjarproject1:debug classname="junit.textui.TestRunner" classpath="${debug.test.classpath}" args="${test.class}"/>
    </target>
    <target name="-debug-start-debugger-test" if="netbeans.home+have.tests" depends="init,compile-test">
        <ejbjarproject1:nbjpdastart name="${test.class}" classpath="${debug.test.classpath}"/>
    </target>
    <target name="debug-test" depends="init,compile-test,-debug-start-debugger-test,-debug-start-debuggee-test"/>
    <target name="-do-debug-fix-test" if="netbeans.home" depends="init,-pre-debug-fix,compile-test-single">
        <ejbjarproject1:nbjpdareload dir="${build.test.classes.dir}"/>
    </target>
    <target name="debug-fix-test" if="netbeans.home" depends="init,-pre-debug-fix,-do-debug-fix-test"/>
    <!--
                CLEANUP SECTION
            -->
    <target name="deps-clean" depends="init" if="no.dist.ear.dir" unless="no.deps">
        <ant target="clean" inheritall="false" antfile="${project.Supporto}/build.xml"/>
    </target>
    <target name="-do-clean" depends="init">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    <target name="-post-clean">
        <!-- Empty placeholder for easier customization. -->
        <!-- You can override this target in the ../build.xml file. -->
    </target>
    <target name="clean" depends="init,deps-clean,-do-clean,-post-clean" description="Clean build products."/>
    <target name="clean-ear" depends="clean"/>
</project>
